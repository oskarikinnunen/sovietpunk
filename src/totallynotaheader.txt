# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    totallynotaheader.txt                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: okinnune <okinnune@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/07/06 13:13:20 by okinnune          #+#    #+#              #
#    Updated: 2022/10/09 22:33:55 by okinnune         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#ifndef SP1947_H
# define SP1947_H

# include "../SDL_built/include/SDL2/SDL.h"
# include "SP_OBJ.h"
# include <stdlib.h>
# include <fcntl.h>
# include <math.h>
# include "libft.h"
# include <stdbool.h>

# define FPSCOUNTER
# define WINDOW_W 960
# define WINDOW_H 720
# define CENTER_X WINDOW_W / 2
# define CENTER_Y WINDOW_H / 2
# define X 0
# define Y 1

# define CLR_PRPL 14231500
# define CLR_TURQ 5505010
# define CLR_GRAY 4868682

# define PNG_COUNT 14
# define TILE_SPAWN 13
# define TILE_SPAWN PNG_COUNT - 1
# define SPAWN TILE_SPAWN + (TILE_SPAWN << 8) + (TILE_SPAWN << 16) + (TILE_SPAWN << 24)

# define DARKNESS	700.0f
# define GAMESCALE	64
# define RAYSLICE	0.0011f
# define FOV		RAYSLICE * WINDOW_W
# define RAD90		1.57079633f
# define WALLTHING	(0.0017777f / RAYSLICE) * 36000 //800w rayslice 0.0018f = 452
# define TURNSPEED	0.003f
# define MOVESPEED	0.100f
# define MOUSESPEED 0.0001f
# define MAPSIZE	20
# define CIRCLESIDES 16
# define FULLRAD	PI * 2.0


# define NORTHWALL 0
# define WESTWALL 1
# define EASTWALL 2
# define SOUTHWALL 3

# define KEYS_LEFTMASK 0
# define KEYS_RGHTMASK 2
# define KEYS_UPMASK 4
# define KEYS_DOWNMASK 8

typedef struct s_player
{
	float	dest[2];
	float	rot;
	float	pos[2];
	int32_t	sp_pos[2];
	float	angle;
	float	move;
}	t_player;

typedef struct s_simpleimg
{
	uint32_t	size[2];
	uint32_t	*data;
	uint32_t	length;
}	t_simpleimg;

typedef struct s_obj
{
	char		**mtlnames;
	uint32_t	*mtlcolors;
	uint8_t		*colors; //Points to colors in mtlcolors
	uint32_t	m_count;
	int32_t		**verts;
	uint32_t	**faces;
	uint32_t	v_count;
	uint32_t	f_count;
}	t_obj;

typedef struct s_fdf
{
	t_simpleimg			img; // TODO: make local
	struct s_clock		*clock;
	t_obj				*obj;
	int					curframe;
	float				*depth;
	float				**verts;
	float				matrices[2][3][3];
	float				view[2];
	u_int32_t			frames;
	int32_t				screenspace[2];
	u_int32_t			scale;
	int32_t				crd[2];
}	t_fdf;

typedef struct s_sdlcontext
{
	SDL_Window				*window;
	SDL_Surface				*surface;
	t_simpleimg				*images;
	t_fdf					fdfs[1];
	int						*ft; //floortable
}	t_sdlcontext;

typedef struct s_clock
{
	uint32_t	prev_time;
	uint32_t	delta;
} t_clock;

typedef struct s_gamecontext
{
	t_sdlcontext	sdl;
	t_player		player;
	_Bool			relativemousemode;
	int32_t			keystate;
	uint32_t			map[MAPSIZE * MAPSIZE];
	int				mouse_delta[2];
	t_clock			clock;
	u_int32_t		tex_x; //TODO: REMOVE and make a local variable
	u_int32_t		v[2];
}	t_gamecontext;



/* player.c */
void	spawnplayer(t_gamecontext *gc);

/* shade.c */
u_int32_t	shade(u_int32_t color, int wallheight);
u_int32_t	vanilla_shade(u_int32_t clr, int wallheight);

/* obj_render.c */
void	drawfdf(t_sdlcontext *context, t_fdf fdf, int *walls);
void	renderobj(t_gamecontext *gc);

/* v2.c */
int		v2dist(int *v, int *ov);
void	f2mul(float f[2], float mul); //TODO: move f2 functions to own file and maybe think of better naming?
void	f2tov2(float f[2], int v[2]);
void	f2add(float f[2], float of[2]);
void	f2cpy(float to[2], float from[2]);
void	v2clamp_xy(int v[2], int min, int max);

void	v2add(int v[2], int ov[2]);
void	v2mul(int v[2], int mul);
void	v2div(int v[2], int div);
void	v2cpy(int to[2], int from[2]);
void	v2diff(int v[2], int ov[2], int rv[2]);

/* eventloop.c */
int		eventloop(t_gamecontext *gc);

/* gameloop.c */
void	gameloop(t_gamecontext gc);

/* draw.c */
void	draw(uint32_t *pxls, int crd[2], uint32_t clr);
void	drawrect(uint32_t *pxls, int crd[2], int clr, int size);
void	drawcircle(uint32_t *pxls, int crd[2], int size, uint32_t clr);
void	drawline(uint32_t *pxls, int from[2], int to[2], uint32_t clr);

/* drawquadtile.c */
void	drawquadtile(t_sdlcontext *context, int p[2], uint32_t wall, int scale);

/* image.c */
uint32_t	samplecolor(t_simpleimg img, int ix, int iy);
void	drawimage(t_sdlcontext *context, int x, int y);
void	drawimagescaled(t_sdlcontext *context, int p[2], int tid, int scale);
void	alloc_image(t_simpleimg *img, int width, int height);

/* fdf.c / obj.c */
void	parse_obj(t_obj *obj);
int		fdf_init(t_fdf *fdf, t_obj *object);
void	fdf_update(t_fdf *fdf);

/* getwall.c */
uint32_t	getindexedwall(uint32_t wall, int i);

/* deltatime.c */
void	update_deltatime(t_clock *c);

/* samplemap.c */
bool		is_in_map(int crd[2]);
uint32_t	samplemap(uint32_t *map, int crd[2]);

/* MAP.C */

void	mapcreator(char *mapname, t_gamecontext gc);

/* simpleimage.c */
void	loadpngs(t_sdlcontext	*sdl);

/* inputhelp.c */
bool	iskey(SDL_Event e, int keycode);
bool	keyismoveleft(SDL_Event e);
bool	keyismoveright(SDL_Event e);
bool	keyismoveup(SDL_Event e);
bool	keyismovedown(SDL_Event e);

/* FILE_OPEN.c */

/* \brief Protected version of the standard 'open' function
	@param filename name of the file.
	@param flags flags used to open the file. */
int		sp_fileopen(char *filename, int flags);

/* ERROR.C */
/* \brief Exits the program after printing out the requested string
	@param str string that's printed out to stderror (2) */
void	error_exit(char *str);

#endif